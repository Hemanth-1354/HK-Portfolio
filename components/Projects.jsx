'use client';
import React, { useState, useEffect } from "react";
import Card from "./Card";

const Projects = () => {
  const [filter, setFilter] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [visibleProjects, setVisibleProjects] = useState(12);
  const [sortOrder, setSortOrder] = useState("newest");
  const [expandedCards, setExpandedCards] = useState({});

const projects = [
    {
      title: "Leet2Git",
      time: "Aug 2024",
      status: "Beta Release",
      thumbnailSrc: "leet2git.jpg",
      videoSrc: "#",
      website: "https://leet2git.ashwithrai.me",
      github: "LEET2GIT",
      category: "fullstack",
      frameworks: [
        "HTML",
        "CSS",
        "JavaScript",
        "Python",
        "FastAPI",
        "SQL Alchemy",
        "Postgres Database",
        "Github API",
        "LeetCode API",
        "Websocket",
        "Full Stack",
      ],
      description:
        "*Leet2Git* ⚡ is an *automation tool* that seamlessly transforms *LeetCode solutions* into a *structured GitHub repository*, making it easier to *track progress* and *showcase problem-solving skills* 🤖. Each solution is *systematically categorized*, ensuring an *organized and accessible format* 🏷️. This project reflects my passion for *streamlining workflows* and creating *efficient tools* 🛠️ to manage *DSA (Data Structures and Algorithms) solutions* 💻. Currently in *beta release* 🚀, Leet2Git is open for *testing and feedback*, allowing developers to explore its features and contribute to its improvement. Your insights and suggestions are invaluable in refining the tool! 💡",
    },
    {
      title: "Leet Code Solutions",
      time: "Nov 2024",
      status: "Maintained",
      thumbnailSrc: "leetSolutions.jpg",
      videoSrc: "#",
      website: "https://leet2git.ashwithrai.me",
      github: "LeetSolutions",
      category: "collection",
      frameworks: ["LeetCode", "DSA", "Problem Solving", "Well Organized"],
      description:
        "*LeetSolutions* 📂 is a *repository* containing *well-organized solutions* to *LeetCode problems* 🤖, automatically generated by the tool *Leet2Git* ⚡. The repository highlights my ability to *structure* and *present DSA (Data Structures and Algorithms) solutions* in an *accessible format* 🧠. Each *solution* is *neatly categorized* 🏷️, making it *easy to explore* and *learn from the problems* 📚. This project demonstrates my *development skills* 💻 and *commitment* to creating *efficient tools* 🛠️ for organizing *coding solutions* 🏆.",
    },
    {
      title: "SkyCast",
      time: "Oct 2024",
      status: "Completed",
      thumbnailSrc: "skycast.jpg",
      videoSrc: "#",
      website: "https://skycast.ashwithrai.me",
      github: "SkyCast",
      category: "fullstack",
      frameworks: [
        "HTML",
        "Tailwind CSS",
        "JavaScript",
        "Node.js ",
        "OpenweatherMap API",
        "Full Stack",
        "On Render",
      ],
      description:
        "SkyCast is a *Node.js weather app* ☁️ that provides *real-time weather updates* and *5-day forecasts* 🌦️. It automatically detects your *location* via *GPS* 📍 or *IP* and supports *manual searches* 🔍 for any city. Powered by the *OpenWeatherMap API* 🌍, SkyCast delivers *accurate weather data* in a *simple, user-friendly interface* 🎯.",
    },
    {
      title: "Priyadarshini - My School Website",
      time: "Feb 2025",
      status: "Completed",
      thumbnailSrc: "priyadarshini.jpg",
      videoSrc: "#",
      website: "https://priyadarshini.ashwithrai.me",
      github: "priyadarshini",
      category: "fullstack",
      frameworks: [
        "Next.js",
        "React.js",
        "Tailwind CSS",
        "Full Stack",
        "Vercel",
        "SSR",
      ],
      description:
        "*Priyadarshini Online* 🏫 is a *modern, full-stack website* built to showcase *Priyadarshini English Medium School* 🌟. Designed with *bilingual support* 🇮🇳 (English & Kannada), the website ensures *accessibility* for a wider audience. It features an *online admission form* 📝 for seamless student enrollment, an *interactive contact form* 📩, and an *embedded Google Map* 📍 for easy navigation. The platform provides *comprehensive details* about the *school's facilities* 🏢, making it an *informative hub* for students, parents, and staff. Hosted on *Vercel* 🚀 and built with *Next.js & Tailwind CSS* 🎨, this project reflects my *dedication* to creating *efficient, user-friendly* web solutions 🌐.",
    },
    {
      title: "Get My Attendance",
      time: "Dec 2024",
      status: "Archived",
      thumbnailSrc: "getMyAttendance.jpg",
      thumbnailLightSrc: "getMyAttendanceLight.jpg",
      videoSrc: "",
      website: "",
      github: "get-my-attendance",
      category: "fullstack",
      frameworks: [
        "HTML",
        "Tailwind CSS",
        "JavaScript",
        "PostgreSQL",
        "Express",
        "EJS",
        "WebSockets",
        "Offline",
        "Hackathon",
        "Attendance Management",
        "Responsive",
        "Innovative",
        "Raspberry Pi",
      ],
      description:
        "Get-My-Attendance is the *evolved version* 🔄 designed for *offline-first attendance management* 📊 in *colleges* using a *Raspberry Pi server* 🍓. It ensures *seamless access* whether *online or offline* 🌐, allowing *teachers* to *manage attendance* and *students* to *track records* efficiently 📚. After marking attendance, *teachers can view the history* 📜 and *download attendance details* in *PDF or Excel format* 📄. With *mobile support* 📱 already integrated, it streamlines attendance management for a hassle-free experience! ✅",
    },
    {
      title: "Classly",
      time: "Nov 2024",
      status: "Planned",
      thumbnailSrc: "classly.jpg",
      thumbnailLightSrc: "classlyLight.jpg",
      videoSrc: "",
      website: "",
      github: "classly",
      category: "fullstack",
      frameworks: [
        "React",
        "Tailwind CSS",
        "PostgreSQL",
        "Express",
        "Education",
        "WebSockets",
        "Offline-first",
        "Raspberry Pi",
        "Scalable",
        "Student Information System (SIS)",
        "Attendance Management",
        "Mobile Support",
        "Innovative",
        "Cloud Synchronization",
      ],
      description:
        "Classly is the evolved version 🔄 of Get-My-Attendance, now a fully hosted web app ☁️ that eliminates the need for a Raspberry Pi setup 🚀. Designed for effortless attendance management 📊, it leverages an intelligent network-based approach 🔗 to streamline the process seamlessly. Teachers can manage attendance with ease, while students can track their records anytime, anywhere 📚. With a modern, scalable architecture, Classly brings next-level efficiency to attendance tracking in colleges! 🎯",
    },
    {
      title: "C++ Lab Codes",
      time: "Oct 2024",
      status: "Completed",
      thumbnailSrc: "cpp.jpg",
      videoSrc: "",
      website: "cpp",
      github: "cpp",
      category: "frontend",
      frameworks: [
        "C++",
        "Python",
        "Beautiful Soup (bs4)",
        "HTML",
        "CSS",
        "JavaScript",
      ],
      description:
        "I created a *webpage* 🌍 that showcases all the *C++ lab codes* from my *3rd semester* 📚. Using a *Python script* 🐍 with *BeautifulSoup (bs4)* 🍜, I converted each *C++ code* into *HTML pages* 🌐, allowing my *classmates* to view both the *code and its output* directly on the *website* 💻. This project made it *easier for students* to access and understand the *code* in an *interactive way* 🎯.",
    },
    {
      title: "Shopping Cart",
      time: "Jul 2024",
      status: "Completed",
      thumbnailSrc: "shopping.jpg",
      videoSrc: "",
      website: "FM-Challenge-Product-list-with-cart",
      github: "FM-Challenge-Product-list-with-cart",
      category: "frontend",
      frameworks: [
        "HTML",
        "CSS",
        "JavaScript",
        "Responsive",
        "Frontend Mentor Challenge",
      ],
      description:
        "I completed the *Product-list-with-cart challenge* 🛒 from *Frontend Mentor*, where I built a *product list* with a *fully functional cart* 🛍️. Users can *add or remove items*, *adjust quantities*, and view an *order confirmation modal* ✅. The project includes *responsive design* 📱, and *hover/focus states* 🖱️ for all interactive elements. I followed the provided *README.md* 📜 for setup and successfully implemented the challenge, ensuring a *smooth user experience* across different devices.",
    },
    {
      title: "Student Ranker",
      time: "Jul 2024",
      status: "Completed",
      thumbnailSrc: "studentRankerAfter.jpg",
      thumbnailLightSrc: "studentRanker.jpg",
      videoSrc: "",
      website: "Student-Ranker",
      github: "Student-Ranker ",
      category: "frontend",
      frameworks: ["HTML", "CSS", "JavaScript"],
      description:
        "I built a *webpage* 🌍 called *Student Ranker* 🎓 to help my *aunt*, a *school teacher* 🍎, *sort student marks* and *assign ranks automatically* 📊. The webpage is built using *HTML, CSS, and JavaScript* 🖥️. Teachers can enter the *names and marks* of *students*, and by pressing the *Arrange button* 🔢, the system *automatically assigns ranks* based on the *students' marks* 🎖️. This project significantly *simplified a previously tedious task* for *teachers* 👩‍🏫.",
    },
    {
      title: "Age Calculator",
      time: "Jul 2024",
      status: "Completed",
      thumbnailSrc: "ageCalculator.jpg",
      videoSrc: "",
      website: "FM-Challenge-Age-calculator-app",
      github: "FM-Challenge-Age-calculator-app",
      category: "frontend",
      frameworks: ["HTML", "CSS", "JavaScript"],
      description:
        "I completed the *Age Calculator App challenge* 📅 from *Frontend Mentor*, which calculates the *user's age* 🎂, including the *month and day* 📆, based on the *date of birth (DOB)* they enter. The app is *optimized* for both *desktop and mobile devices* 🖥️📱, providing a *seamless user experience* across different *screen sizes* 📊.",
    },
    {
      title: "Super Hero Web App",
      time: "Jun 2024",
      status: "Completed",
      thumbnailSrc: "hero.jpg",
      videoSrc: "",
      website: "https://fastapi-superhero.onrender.com/",
      github: "FastAPI-SuperHero",
      category: "fullstack",
      frameworks: [
        "FastAPI",
        "HTML",
        "CSS",
        "JavaScript",
        "Postgresql",
        "Cockroach DB",
        "SQL Alchemy",
        "Alembic",
        "On Render",
      ],
      description:
        "I built the *FastAPI-SuperHero* 🦸‍♂️ web application as my *first full-stack project* using *FastAPI* ⚡. Users can *log in* 🔐 with *email* (dummy email works), *sign up*, or *log in as a guest* 👤, and *create heroes* with *names and alter-egos* like *Spiderman* and *Peter Parker* 🕷️. They can *view all heroes*, *see individual hero details*, and *like* both their own and others' heroes ❤️. Additionally, users can *manage their profile*, *delete their heroes*, or even *delete their profile entirely* 🗑️. This project demonstrates my *ability to build a full-stack application* with *user authentication* and *CRUD operations* 🔄.",
    },
    {
      title: "Vegetable and Fruits Classifier",
      time: "Jan 2025",
      status: "Experimental",
      thumbnailSrc: "VegFruitAi.jpg",
      videoSrc: "",
      website: "",
      github: "VegFruitAI",
      category: "ai",
      frameworks: [
        "Python",
        "FastAPI",
        "TensorFlow",
        "HTML",
        "CSS",
        "JavaScript",
      ],
      description:
        "I developed an *AI-powered fruit and vegetable recognition tool* 🍏🥦 that uses a *machine learning model* 🧠 to *identify fruits and vegetables* from *uploaded images* 🖼️. The project includes a *FastAPI backend* ⚡ and a *user-friendly frontend* 🎨. I used *TensorFlow* 🤖 for *image classification*, enabling *accurate identification* of various *fruits and vegetables* based on the *uploaded images* 🍎🥕.",
    },
    {
      title: "TO-DO App",
      time: "Nov 2024",
      status: "Completed",
      thumbnailSrc: "todo.jpg",
      videoSrc: "",
      website: "TODO-REACT",
      github: "TODO-REACT",
      category: "frontend",
      frameworks: ["React", "Tailwind CSS"],
      description:
        "I built a *TO-DO app* 📝 while learning *React* ⚛️, which is my *first React application* 🎉. The app allows users to *take notes*, *mark them as completed* ✅, and *hide the marked ones* 👀. It also *stores the information locally* 💾, ensuring the *data persists* even when the *browser tab is closed* 🔄. This project gave me *hands-on experience* with *React* and *local storage*, enhancing my *understanding of state management* and *data persistence*.",
    },
    {
      title: "Shell Codes using Python",
      time: "Oct 2024",
      status: "On Hold",
      thumbnailSrc: "shellpy.jpg",
      videoSrc: "",
      website: "",
      github: "shellpy",
      category: "tool",
      frameworks: ["Python", "Shell Scripting"],
      description:
        "*ShellPy* 🐍 is a *repository* where *Python meets shell scripting* 🖥️, designed to *simplify tasks* like *managing directories* and *files* 📂. The main script, *dirgen* 🏗️, allows users to *create directory and file structures* using an *easy Emmet-like syntax* ✨. By adding the *repository to your PATH*, you can use the *dirgen command* in your *terminal* 🖥️ to *generate file structures* with ease. The project is designed to make *shell scripting* more *efficient* and *fun* 🎉, with plans for *future Python scripts* 🐍 to further *enhance your shell scripting experience*.",
    },
    {
      title: "Web Development Skill Lab Codes",
      time: "Aug 2024",
      status: "Completed",
      thumbnailSrc: "hybridWebdev.jpg",
      videoSrc: "",
      website: "Skill-Lab-Hybrid-Web-Dev",
      github: "Skill-Lab-Hybrid-Web-Dev",
      category: "collection",
      frameworks: ["HTML", "CSS", "JavaScript"],
      description:
        "This repository contains the work I have completed as part of the *Hybrid Web Development* 🌐 program offered by my *college* 🎓. The program is structured in a *day-by-day format* 📆, with specific *tasks, exercises, and assignments* to be completed *each day* 🏗️.",
    },
  ];

  // Toggle card expansion
  const toggleExpand = (index) => {
    setExpandedCards(prev => ({
      ...prev,
      [index]: !prev[index]
    }));
  };

  // Filter projects based on category and search term
  const filteredProjects = projects
    .filter((project) => {
      if (filter === "all") return true;
      return project.category === filter;
    })
    .filter((project) => {
      if (!searchTerm) return true;
      const searchLower = searchTerm.toLowerCase();
      return (
        project.title.toLowerCase().includes(searchLower) ||
        project.description.toLowerCase().includes(searchLower) ||
        project.frameworks.some((framework) =>
          framework.toLowerCase().includes(searchLower)
        )
      );
    });

  // Sort projects based on sortOrder
  const sortedProjects = [...filteredProjects].sort((a, b) => {
    const getTimestamp = (dateStr) => {
      const [month, year] = dateStr.split(" ");
      const monthMap = {
        Jan: 1, Feb: 2, Mar: 3, Apr: 4, May: 5, Jun: 6,
        Jul: 7, Aug: 8, Sep: 9, Oct: 10, Nov: 11, Dec: 12
      };
      return new Date(parseInt(year), monthMap[month] - 1).getTime();
    };

    const timeA = getTimestamp(a.time);
    const timeB = getTimestamp(b.time);

    if (sortOrder === "newest") {
      return timeB - timeA;
    } else {
      return timeA - timeB;
    }
  });

  // Load more projects when scrolling to bottom
  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + document.documentElement.scrollTop >=
        document.documentElement.offsetHeight - 100
      ) {
        setVisibleProjects((prev) => Math.min(prev + 6, sortedProjects.length));
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [sortedProjects.length]);

  // Get all unique tech stacks for filter options
  const allFrameworks = [...new Set(projects.flatMap(project => project.frameworks))];

  return (
    <div className="flex flex-col items-center my-8 px-4 md:px-8 max-w-7xl mx-auto" id="projects">
      <div className="w-full text-center mb-12">
        <h2 className="text-4xl md:text-5xl font-bold tracking-tighter my-3 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          Featured Projects
        </h2>
        <p className="text-muted-foreground text-lg md:text-xl/relaxed max-w-3xl mx-auto mt-4">
          I build projects from 0 to 1, turning ideas into reality. Take a look at
          some of my favorite projects below.
        </p>
      </div>

      {/* Filter and Search Controls */}
      <div className="w-full flex flex-col md:flex-row gap-4 mb-8 sticky top-0 z-10 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md p-4 rounded-lg shadow-md">
        <div className="flex-1 flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <input
              type="text"
              placeholder="Search projects..."
              className="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <div className="flex gap-2 overflow-x-auto pb-2 md:pb-0 scrollbar-thin">
            <button
              className={`px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap ${
                filter === "all"
                  ? "bg-blue-600 text-white"
                  : "bg-gray-200 dark:bg-gray-700"
              }`}
              onClick={() => setFilter("all")}
            >
              All Projects
            </button>
            <button
              className={`px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap ${
                filter === "fullstack"
                  ? "bg-blue-600 text-white"
                  : "bg-gray-200 dark:bg-gray-700"
              }`}
              onClick={() => setFilter("fullstack")}
            >
              Full Stack
            </button>
            <button
              className={`px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap ${
                filter === "frontend"
                  ? "bg-blue-600 text-white"
                  : "bg-gray-200 dark:bg-gray-700"
              }`}
              onClick={() => setFilter("frontend")}
            >
              Frontend
            </button>
            <button
              className={`px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap ${
                filter === "ai"
                  ? "bg-blue-600 text-white"
                  : "bg-gray-200 dark:bg-gray-700"
              }`}
              onClick={() => setFilter("ai")}
            >
              AI Projects
            </button>
            <button
              className={`px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap ${
                filter === "tool"
                  ? "bg-blue-600 text-white"
                  : "bg-gray-200 dark:bg-gray-700"
              }`}
              onClick={() => setFilter("tool")}
            >
              Tools
            </button>
            <button
              className={`px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap ${
                filter === "collection"
                  ? "bg-blue-600 text-white"
                  : "bg-gray-200 dark:bg-gray-700"
              }`}
              onClick={() => setFilter("collection")}
            >
              Collections
            </button>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <label htmlFor="sort" className="text-sm whitespace-nowrap">Sort by:</label>
          <select
            id="sort"
            className="p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800"
            value={sortOrder}
            onChange={(e) => setSortOrder(e.target.value)}
          >
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
          </select>
        </div>
      </div>

      {/* Project Statistics */}
      <div className="w-full grid grid-cols-2 sm:grid-cols-4 gap-4 mb-8">
        <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg shadow-sm text-center">
          <div className="text-3xl font-bold text-blue-600 dark:text-blue-400">{projects.length}</div>
          <div className="text-sm text-gray-600 dark:text-gray-300">Total Projects</div>
        </div>
        <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg shadow-sm text-center">
          <div className="text-3xl font-bold text-purple-600 dark:text-purple-400">
            {projects.filter(p => p.status === "Completed").length}
          </div>
          <div className="text-sm text-gray-600 dark:text-gray-300">Completed</div>
        </div>
        <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg shadow-sm text-center">
          <div className="text-3xl font-bold text-green-600 dark:text-green-400">
            {projects.filter(p => p.category === "fullstack").length}
          </div>
          <div className="text-sm text-gray-600 dark:text-gray-300">Full Stack</div>
        </div>
        <div className="bg-amber-50 dark:bg-amber-900/20 p-4 rounded-lg shadow-sm text-center">
          <div className="text-3xl font-bold text-amber-600 dark:text-amber-400">
            {allFrameworks.length}
          </div>
          <div className="text-sm text-gray-600 dark:text-gray-300">Technologies</div>
        </div>
      </div>

      {/* Results Count */}
      <div className="w-full mb-4 text-gray-600 dark:text-gray-400">
        Showing {Math.min(visibleProjects, sortedProjects.length)} of {sortedProjects.length} projects
      </div>

      {/* Projects Grid */}
      <div className="grid md:grid-cols-2 lg:grid-cols-3 w-full gap-6">
        {sortedProjects.slice(0, visibleProjects).map((project, index) => (
          <div 
            key={index} 
            className={`transform transition-all duration-300 hover:-translate-y-2 ${
              expandedCards[index] ? "lg:col-span-2 xl:col-span-1" : ""
            }`}
          >
            <Card
              title={project.title}
              time={project.time}
              status={project.status}
              thumbnailSrc={project.thumbnailSrc}
              thumbnailLightSrc={project.thumbnailLightSrc}
              videoSrc={project.videoSrc}
              website={project.website}
              github={project.github}
              frameworks={project.frameworks}
              description={project.description}
              isExpanded={expandedCards[index]}
              onToggleExpand={() => toggleExpand(index)}
            />
          </div>
        ))}
      </div>

      {/* Load More Button */}
      {visibleProjects < sortedProjects.length && (
        <button
          onClick={() => setVisibleProjects(prev => Math.min(prev + 6, sortedProjects.length))}
          className="mt-8 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg shadow-md transition-all duration-300"
        >
          Load More Projects
        </button>
      )}

      {/* No Results */}
      {sortedProjects.length === 0 && (
        <div className="w-full py-12 text-center">
          <div className="text-3xl mb-4">🔍</div>
          <h3 className="text-xl font-medium mb-2">No projects found</h3>
          <p className="text-gray-600 dark:text-gray-400">
            Try adjusting your search or filter criteria
          </p>
          <button 
            onClick={() => {
              setFilter("all");
              setSearchTerm("");
            }}
            className="mt-4 px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
          >
            Reset Filters
          </button>
        </div>
      )}
    </div>
  );
};

export default Projects;